import express from 'express';
import cors from 'cors';
import cookieParser from 'cookie-parser';
import { ipFilter } from './src/middlewares/ipFilter.js';
import { errorHandler, notFoundHandler } from './src/middlewares/errorHandler.js';
import { requireAdmin, trackViolations, validateRouteAccess } from './src/middlewares/accessLevel.js';
import { requireAuth, optionalAuth } from './src/functions/auth/authMiddleware.js';
import { getApiInfo } from './src/routes/index.js';
import { getApiDocs } from './src/routes/docs.js';
import { getLogsDashboard } from './src/routes/logsDashboard.js';
import { autoLoadRoutes } from './src/core/routeLoader.js';
import logsRoutes from './src/routes/logsRoutes.js';
import zerotierRoutes from './src/routes/zerotier.js';
import securityRoutes from './src/routes/securityRoutes.js';
import authRoutes from './src/routes/authRoutes.js';
import { supabaseProxy, supabaseProxyCors } from './src/middlewares/supabaseProxy.js';
import securityHeaders from './src/middlewares/securityHeaders.js';
import config from './src/config/index.js';

const app = express();

// Trust proxy - IMPORTANTE: Permite que o Express confie no Traefik/Nginx
// Necess√°rio para rate limiting e logs corretos quando atr√°s de proxy
app.set('trust proxy', 1);

// Security Headers (CSP, HSTS, X-Frame-Options, etc) - PRIMEIRO
app.use(securityHeaders);

// Middlewares globais
app.use(cors({
    origin: [
        // Produ√ß√£o
        'https://samm.host',                 // Frontend produ√ß√£o
        'http://samm.host',                  // Frontend produ√ß√£o (HTTP fallback)
        'http://177.73.207.121',             // IP p√∫blico (HTTP)
        'http://177.73.207.121:80',          // IP p√∫blico porta 80
        'https://177.73.207.121',            // IP p√∫blico (HTTPS)
        'https://177.73.207.121:443',        // IP p√∫blico porta 443
        
        // Desenvolvimento local
        'http://localhost',
        'http://localhost:80',
        'http://localhost:3000',
        'http://localhost:5173',
        'http://127.0.0.1',
        'http://127.0.0.1:80',
        'http://127.0.0.1:3000',
        'http://127.0.0.1:5173',
        
        // Regex patterns
        /^http:\/\/10\.244\.\d+\.\d+:\d+$/,  // ZeroTier range (10.244.0.0/16)
        /^http:\/\/localhost:\d+$/,          // Localhost com qualquer porta
        /^http:\/\/127\.0\.0\.1:\d+$/        // 127.0.0.1 com qualquer porta
    ],
    credentials: true,
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH'],
    allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With']
}));
app.use(express.json());
app.use(cookieParser());

// Health check endpoint (para Docker healthcheck) - ANTES do filtro de IP
app.get('/health', (req, res) => {
    res.status(200).json({
        status: 'healthy',
        timestamp: new Date().toISOString(),
        uptime: process.uptime()
    });
});

// =========================================================================
// üìç ROTAS P√öBLICAS (sem filtro de IP)
// =========================================================================
// Estas rotas s√£o acess√≠veis a qualquer usu√°rio da internet

// üîÑ PROXY REVERSO SUPABASE
// Redireciona /supabase/* para o Supabase interno (sem dom√≠nio p√∫blico)
app.use('/supabase', supabaseProxyCors, supabaseProxy);

// üîê ROTAS DE AUTENTICA√á√ÉO (customizadas, integradas com Supabase)
app.use('/auth', authRoutes);

// =========================================================================
// üìç ROTAS DE INFORMA√á√ÉO (p√∫blico, sem autentica√ß√£o)
// =========================================================================

// Rotas de sistema (documenta√ß√£o e logs)
app.get('/', getApiInfo);           // JSON com toda documenta√ß√£o (p√∫blico)
app.get('/docs', getApiDocs);       // P√°gina HTML bonita (p√∫blico)

// Rota para listar fun√ß√µes dispon√≠veis (p√∫blico, mas pode estar limitado por n√≠vel de acesso)
app.get('/functions', async (req, res) => {
    try {
        const { readdir, readFile } = await import('fs/promises');
        const { join, dirname } = await import('path');
        const { fileURLToPath } = await import('url');
        
        const __filename = fileURLToPath(import.meta.url);
        const __dirname = dirname(__filename);
        const functionsPath = join(__dirname, 'src/functions');
        
        const folders = await readdir(functionsPath, { withFileTypes: true });
        const functions = [];
        
        for (const folder of folders) {
            if (folder.isDirectory() && !folder.name.startsWith('_')) {
                const functionInfo = {
                    name: folder.name,
                    path: `/${folder.name}`,
                    description: 'Sem descri√ß√£o dispon√≠vel',
                    endpoints: []
                };
                
                // Tentar ler README.md
                try {
                    const readmePath = join(functionsPath, folder.name, 'README.md');
                    const readmeContent = await readFile(readmePath, 'utf-8');
                    const firstLine = readmeContent.split('\n').find(line => line.trim() && !line.startsWith('#'));
                    if (firstLine) {
                        functionInfo.description = firstLine.trim();
                    }
                } catch (err) {
                    // README n√£o existe
                }
                
                // Tentar descobrir rotas
                try {
                    const routesPath = join(functionsPath, folder.name, `${folder.name}Routes.js`);
                    const routesContent = await readFile(routesPath, 'utf-8');
                    const routeMatches = routesContent.matchAll(/router\.(get|post|put|delete|patch)\(['"`]([^'"`)]+)['"`]/g);
                    
                    for (const match of routeMatches) {
                        functionInfo.endpoints.push({
                            method: match[1].toUpperCase(),
                            path: match[2]
                        });
                    }
                } catch (err) {
                    // Arquivo de rotas n√£o existe
                }
                
                functions.push(functionInfo);
            }
        }
        
        // Detectar n√≠vel de acesso do usu√°rio
        const { getIPAccessLevel } = await import('./src/middlewares/accessLevel.js');
        const clientIp = req.ip_detected || req.ip;
        const accessLevel = await getIPAccessLevel(clientIp);
        
        // Filtrar baseado no n√≠vel de acesso
        let filteredFunctions = functions;
        let note = '';
        
        if (accessLevel === 'guest') {
            // GUEST: n√£o v√™ endpoints (apenas visualiza que fun√ß√µes existem)
            filteredFunctions = functions.map(func => ({
                ...func,
                endpoints: []  // Oculta todos os endpoints
            }));
            note = 'üëÅÔ∏è Acesso de visualiza√ß√£o: voc√™ pode ver que fun√ß√µes existem, mas n√£o pode us√°-las. Entre em contato com o administrador para obter acesso.';
        } else if (accessLevel === 'trusted') {
            // TRUSTED: v√™ TUDO (tem acesso total √†s functions)
            note = '‚úÖ Acesso completo √†s fun√ß√µes: voc√™ pode usar todos os endpoints das fun√ß√µes carregadas dinamicamente.';
        } else if (accessLevel === 'admin') {
            // ADMIN: v√™ TUDO
            note = 'üîì Acesso administrativo: voc√™ tem acesso total a todas as rotas, incluindo gerenciamento da API.';
        }
        
        res.json({
            success: true,
            total: filteredFunctions.length,
            functions: filteredFunctions,
            accessLevel: accessLevel,
            note: note
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            functions: [],
            error: error.message
        });
    }
});

// =========================================================================
// üìç ROTAS ADMINISTRATIVAS (IP Filter + requireAdmin)
// =========================================================================
// Estas rotas s√£o acess√≠veis APENAS via VPN (ZeroTier) ou IPs autorizados

app.get('/logs', ipFilter, requireAdmin, getLogsDashboard); // üîí Dashboard APENAS para admin
app.use('/logs', ipFilter, requireAdmin, logsRoutes);   // üîí API de logs APENAS para admin
app.use('/zerotier', ipFilter, requireAdmin, zerotierRoutes); // üîí ZeroTier APENAS para admin
app.use('/security', ipFilter, requireAdmin, securityRoutes); // üîí Seguran√ßa APENAS para admin

// =========================================================================
// üìç ROTAS DE API (fun√ß√µes din√¢micas - COM validateRouteAccess)
// =========================================================================
// Aplica middlewares de valida√ß√£o e rastreamento apenas nas rotas de API

app.use('/api', validateRouteAccess, trackViolations);

// Auto-carregar funcionalidades do diret√≥rio src/functions/
await autoLoadRoutes(app);

// Handlers de erro (devem ser os √öLTIMOS middlewares)
app.use(notFoundHandler);  // 404 - Rota n√£o encontrada
app.use(errorHandler);     // Erro gen√©rico

// Iniciar servidor
app.listen(config.server.port, config.server.host, () => {
    // Importar e executar logs de inicializa√ß√£o
    import('./src/utils/startupLogger.js')
        .then(({ logStartup }) => logStartup())
        .catch(() => {
            // Fallback caso o logger falhe
            console.log(`\nüöÄ Servidor rodando em ${config.server.host}:${config.server.port}\n`);
        });
    
    // Iniciar Alert Worker (Fase 3)
    import('./src/utils/alertSystem.js')
        .then(({ startAlertWorker }) => startAlertWorker())
        .catch((err) => {
            console.error('‚ö†Ô∏è  Erro ao iniciar Alert Worker:', err);
        });
});
