/**
 * ============================================
 * 游논 USER PRESENCE SERVICE
 * ============================================
 * Servi칞o para rastreamento de presen칞a online
 * Integrado com WebSocket para status em tempo real
 * ============================================
 */

import { supabase, supabaseAdmin } from '../config/supabase.js';
import logger from '../config/logger.js';

/**
 * Marcar usu치rio como online
 * 
 * @param {string} userId - ID do usu치rio
 * @param {string} socketId - ID do socket WebSocket
 * @param {string} ipAddress - Endere칞o IP
 * @param {string} userAgent - User agent do navegador
 */
export async function setUserOnline(userId, socketId, ipAddress = null, userAgent = null) {
    try {
        const { data, error } = await supabaseAdmin
            .rpc('set_user_online', {
                p_user_id: userId,
                p_socket_id: socketId,
                p_ip_address: ipAddress,
                p_user_agent: userAgent
            });

        if (error) {
            throw error;
        }

        logger.info(`游릭 Usu치rio marcado como online`, { userId, socketId });

        return { data, error: null };
    } catch (error) {
        logger.error(`Erro ao marcar usu치rio como online`, { userId, error: error.message });
        return { data: null, error };
    }
}

/**
 * Marcar usu치rio como offline
 * 
 * @param {string} userId - ID do usu치rio
 */
export async function setUserOffline(userId) {
    try {
        const { data, error } = await supabaseAdmin
            .rpc('set_user_offline', {
                p_user_id: userId
            });

        if (error) {
            throw error;
        }

        logger.info(`游댮 Usu치rio marcado como offline`, { userId });

        return { data, error: null };
    } catch (error) {
        logger.error(`Erro ao marcar usu치rio como offline`, { userId, error: error.message });
        return { data: null, error };
    }
}

/**
 * Atualizar heartbeat do usu치rio
 * (Manter status online atualizado)
 * 
 * @param {string} userId - ID do usu치rio
 */
export async function updateHeartbeat(userId) {
    try {
        const { data, error } = await supabaseAdmin
            .rpc('update_user_heartbeat', {
                p_user_id: userId
            });

        if (error) {
            throw error;
        }

        // Log apenas em debug mode para n칚o poluir
        logger.debug(`游눕 Heartbeat atualizado`, { userId });

        return { data, error: null };
    } catch (error) {
        logger.error(`Erro ao atualizar heartbeat`, { userId, error: error.message });
        return { data: null, error };
    }
}

/**
 * Buscar usu치rios online
 * (Apenas para admins)
 * 
 * @param {string} userToken - Token JWT do admin
 */
export async function getOnlineUsers(userToken) {
    try {
        // Criar cliente com JWT do admin (RLS valida role)
        const { createClient } = await import('@supabase/supabase-js');
        const supabaseWithAuth = createClient(
            process.env.SUPABASE_URL,
            process.env.SUPABASE_ANON_KEY,
            {
                global: {
                    headers: {
                        Authorization: `Bearer ${userToken}`
                    }
                }
            }
        );

        const { data, error } = await supabaseWithAuth
            .rpc('get_online_users');

        if (error) {
            throw error;
        }

        logger.info(`游늵 Usu치rios online consultados`, { count: data?.length || 0 });

        return { data: data || [], error: null };
    } catch (error) {
        logger.error(`Erro ao buscar usu치rios online`, { error: error.message });
        return { data: null, error };
    }
}

/**
 * Buscar estat칤sticas de presen칞a
 * (Apenas para admins)
 * 
 * @param {string} userToken - Token JWT do admin
 */
export async function getPresenceStats(userToken) {
    try {
        // Criar cliente com JWT do admin (RLS valida role)
        const { createClient } = await import('@supabase/supabase-js');
        const supabaseWithAuth = createClient(
            process.env.SUPABASE_URL,
            process.env.SUPABASE_ANON_KEY,
            {
                global: {
                    headers: {
                        Authorization: `Bearer ${userToken}`
                    }
                }
            }
        );

        const { data, error } = await supabaseWithAuth
            .rpc('get_presence_stats');

        if (error) {
            throw error;
        }

        logger.info(`游늳 Estat칤sticas de presen칞a consultadas`, data?.[0] || {});

        return { data: data?.[0] || null, error: null };
    } catch (error) {
        logger.error(`Erro ao buscar estat칤sticas de presen칞a`, { error: error.message });
        return { data: null, error };
    }
}

/**
 * Limpar usu치rios inativos
 * (Considerar offline se sem heartbeat h치 5 minutos)
 * 
 * Deve ser executado periodicamente (cron/interval)
 */
export async function cleanupInactiveUsers() {
    try {
        const { data, error } = await supabaseAdmin
            .rpc('cleanup_inactive_users');

        if (error) {
            throw error;
        }

        if (data > 0) {
            logger.info(`游빛 Usu치rios inativos marcados como offline`, { count: data });
        }

        return { data, error: null };
    } catch (error) {
        logger.error(`Erro ao limpar usu치rios inativos`, { error: error.message });
        return { data: null, error };
    }
}

/**
 * Iniciar servi칞o de limpeza autom치tica
 * (Executar a cada 2 minutos)
 */
export function startPresenceCleanup() {
    // Executar imediatamente
    cleanupInactiveUsers();

    // Executar a cada 2 minutos
    const interval = setInterval(() => {
        cleanupInactiveUsers();
    }, 2 * 60 * 1000); // 2 minutos

    logger.info(`游빛 Servi칞o de limpeza de presen칞a iniciado (intervalo: 2 min)`);

    return interval;
}
