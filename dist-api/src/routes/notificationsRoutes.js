/**
 * ============================================
 * üîî NOTIFICATIONS ROUTES
 * ============================================
 * Endpoints para gerenciamento de notifica√ß√µes
 * ============================================
 */

import express from 'express';
import rateLimit from 'express-rate-limit';
import { requireAuth } from '../middlewares/adminAuth.js';
import {
    getUserNotifications,
    markAsRead,
    markAllAsRead,
    deleteNotification,
    getUnreadCount
} from '../services/notificationsService.js';
import logger from '../config/logger.js';

const router = express.Router();

// ============================================
// RATE LIMITING
// ============================================

// Leitura: mais permissivo (consultas frequentes)
const readLimiter = rateLimit({
    windowMs: 60 * 1000, // 1 minuto
    max: 100, // 100 requests por minuto
    message: 'Muitas requisi√ß√µes de leitura. Tente novamente em 1 minuto.',
    standardHeaders: true,
    legacyHeaders: false
});

// Escrita: mais restritivo (a√ß√µes menos frequentes)
const writeLimiter = rateLimit({
    windowMs: 60 * 1000, // 1 minuto
    max: 30, // 30 requests por minuto
    message: 'Muitas requisi√ß√µes de escrita. Tente novamente em 1 minuto.',
    standardHeaders: true,
    legacyHeaders: false
});

// ============================================
// ENDPOINTS
// ============================================

/**
 * GET /api/notifications
 * Buscar notifica√ß√µes do usu√°rio
 */
router.get('/', requireAuth, readLimiter, async (req, res) => {
    try {
        const userId = req.user.id;
        const userToken = req.user.token;

        // Par√¢metros de query
        const unreadOnly = req.query.unread === 'true';
        const limit = parseInt(req.query.limit) || 50;
        const type = req.query.type || null;

        const { data, error } = await getUserNotifications(userId, userToken, {
            unreadOnly,
            limit,
            type
        });

        if (error) {
            logger.error('Erro ao buscar notifica√ß√µes', { userId, error: error.message });
            return res.status(500).json({
                success: false,
                message: 'Erro ao buscar notifica√ß√µes',
                error: error.message
            });
        }

        res.json({
            success: true,
            data: data || []
        });
    } catch (error) {
        logger.error('Erro ao buscar notifica√ß√µes', { error: error.message });
        res.status(500).json({
            success: false,
            message: 'Erro ao buscar notifica√ß√µes',
            error: error.message
        });
    }
});

/**
 * GET /api/notifications/unread-count
 * Contar notifica√ß√µes n√£o lidas
 */
router.get('/unread-count', requireAuth, readLimiter, async (req, res) => {
    try {
        const userId = req.user.id;
        const userToken = req.user.token;

        const { data, error } = await getUnreadCount(userId, userToken);

        if (error) {
            logger.error('Erro ao contar notifica√ß√µes n√£o lidas', { userId, error: error.message });
            return res.status(500).json({
                success: false,
                message: 'Erro ao contar notifica√ß√µes',
                error: error.message
            });
        }

        res.json({
            success: true,
            unreadCount: data
        });
    } catch (error) {
        logger.error('Erro ao contar notifica√ß√µes n√£o lidas', { error: error.message });
        res.status(500).json({
            success: false,
            message: 'Erro ao contar notifica√ß√µes',
            error: error.message
        });
    }
});

/**
 * PUT /api/notifications/:id/read
 * Marcar notifica√ß√£o como lida
 */
router.put('/:id/read', requireAuth, writeLimiter, async (req, res) => {
    try {
        const userId = req.user.id;
        const userToken = req.user.token;
        const notificationId = req.params.id;

        const { data, error } = await markAsRead(userId, userToken, notificationId);

        if (error) {
            logger.error('Erro ao marcar notifica√ß√£o como lida', { userId, notificationId, error: error.message });
            return res.status(500).json({
                success: false,
                message: 'Erro ao marcar notifica√ß√£o como lida',
                error: error.message
            });
        }

        res.json({
            success: true,
            message: 'Notifica√ß√£o marcada como lida'
        });
    } catch (error) {
        logger.error('Erro ao marcar notifica√ß√£o como lida', { error: error.message });
        res.status(500).json({
            success: false,
            message: 'Erro ao marcar notifica√ß√£o como lida',
            error: error.message
        });
    }
});

/**
 * PUT /api/notifications/read-all
 * Marcar todas notifica√ß√µes como lidas
 */
router.put('/read-all', requireAuth, writeLimiter, async (req, res) => {
    try {
        const userId = req.user.id;
        const userToken = req.user.token;

        const { data, error } = await markAllAsRead(userId, userToken);

        if (error) {
            logger.error('Erro ao marcar todas notifica√ß√µes como lidas', { userId, error: error.message });
            return res.status(500).json({
                success: false,
                message: 'Erro ao marcar todas notifica√ß√µes como lidas',
                error: error.message
            });
        }

        res.json({
            success: true,
            message: `${data} notifica√ß√µes marcadas como lidas`
        });
    } catch (error) {
        logger.error('Erro ao marcar todas notifica√ß√µes como lidas', { error: error.message });
        res.status(500).json({
            success: false,
            message: 'Erro ao marcar todas notifica√ß√µes como lidas',
            error: error.message
        });
    }
});

/**
 * DELETE /api/notifications/:id
 * Deletar notifica√ß√£o
 */
router.delete('/:id', requireAuth, writeLimiter, async (req, res) => {
    try {
        const userId = req.user.id;
        const userToken = req.user.token;
        const notificationId = req.params.id;

        const { data, error } = await deleteNotification(userId, userToken, notificationId);

        if (error) {
            logger.error('Erro ao deletar notifica√ß√£o', { userId, notificationId, error: error.message });
            return res.status(500).json({
                success: false,
                message: 'Erro ao deletar notifica√ß√£o',
                error: error.message
            });
        }

        res.json({
            success: true,
            message: 'Notifica√ß√£o deletada com sucesso'
        });
    } catch (error) {
        logger.error('Erro ao deletar notifica√ß√£o', { error: error.message });
        res.status(500).json({
            success: false,
            message: 'Erro ao deletar notifica√ß√£o',
            error: error.message
        });
    }
});

export default router;
