version: '3.8'

services:
  api:
    build: .
    container_name: ${COOLIFY_CONTAINER_NAME:-api-container}
    restart: unless-stopped
    
    # Networks - apenas coolify (Supabase também está nela)
    networks:
      - coolify
    
    # Porta interna (não expor publicamente)
    expose:
      - "3000"
    
    # Environment variables (Coolify vai injetar)
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - HOST=${HOST:-0.0.0.0}
      - PORT=${PORT:-3000}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - FRONTEND_URL=${FRONTEND_URL}
      - ALLOWED_IPS=${ALLOWED_IPS}
      - SESSION_SECRET=${SESSION_SECRET}
      - SESSION_MAX_AGE=${SESSION_MAX_AGE:-3600000}
    
    # Healthcheck
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 3s
      start_period: 5s
      retries: 3
    
    # Labels para Traefik (Coolify pode adicionar mais)
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-backend.rule=Host(`${COOLIFY_FQDN:-samm.host}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.api-backend.entrypoints=https"
      - "traefik.http.routers.api-backend.tls=true"
      - "traefik.http.routers.api-backend.tls.certresolver=letsencrypt"
      - "traefik.http.services.api-backend.loadbalancer.server.port=3000"

# Networks
networks:
  # Network padrão do Coolify (onde tudo está)
  coolify:
    external: true
    name: coolify
