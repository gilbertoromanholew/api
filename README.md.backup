# üöÄ API Modular - Node.js & Express# ÔøΩ API Multi-Funcional



[![Node.js](https://img.shields.io/badge/Node.js-22.18.0+-339933?logo=node.js&logoColor=white)](https://nodejs.org/)> API REST modular com valida√ß√£o, processamento de PDF e c√°lculos matem√°ticos

[![Express](https://img.shields.io/badge/Express-5.1.0-000000?logo=express&logoColor=white)](https://expressjs.com/)

[![License](https://img.shields.io/badge/License-MIT-blue.svg)](LICENSE)[![Node.js](https://img.shields.io/badge/Node.js-22.18.0+-green.svg)](https://nodejs.org/)

[![Made with ‚ù§Ô∏è](https://img.shields.io/badge/Made%20with-‚ù§%20Ô∏è-red.svg)](https://github.com/gilbertoromanholew/api)[![Express](https://img.shields.io/badge/Express-5.1.0-blue.svg)](https://expressjs.com/)

[![Status](https://img.shields.io/badge/Status-Online-success.svg)](https://api.samm.host)

> **API moderna e extens√≠vel com arquitetura modular, auto-carregamento de rotas e sistema de templates para desenvolvimento r√°pido.**

---

---

## üìã √çndice

## ‚ú® Caracter√≠sticas

- [Vis√£o Geral](#-vis√£o-geral)

- üéØ **Arquitetura Modular** - Funcionalidades independentes e auto-descobertas- [Funcionalidades](#-funcionalidades)

- ‚ö° **Auto-carregamento** - Rotas descobertas e registradas automaticamente- [Instala√ß√£o](#-instala√ß√£o)

- üõ°Ô∏è **Valida√ß√£o Centralizada** - Sistema de schemas reutiliz√°veis- [Configura√ß√£o](#-configura√ß√£o)

- üé® **Respostas Padronizadas** - BaseController para consist√™ncia- [Uso](#-uso)

- üìù **Documenta√ß√£o Autom√°tica** - Dashboard web com lista de funcionalidades- [Estrutura](#-estrutura-do-projeto)

- üîí **Controle de Acesso** - Filtro de IP e logs de acessos- [Seguran√ßa](#-seguran√ßa)

- üö¶ **Tratamento de Erros** - Global error handler e 404 customizado- [Deploy](#-deploy)

- üì¶ **Sistema de Templates** - Crie novas funcionalidades em 5 minutos- [Desenvolvimento](#-desenvolvimento)

- üåê **CORS Habilitado** - Pronto para APIs p√∫blicas

- üìä **Dashboard de Logs** - Visualize acessos em tempo real---



---## üéØ Vis√£o Geral



## üìã √çndiceAPI REST modular constru√≠da com Node.js e Express, oferecendo m√∫ltiplas funcionalidades:

- ‚úÖ Valida√ß√£o de documentos (CPF)

- [Instala√ß√£o](#-instala√ß√£o)- üìÑ Extra√ß√£o de texto de PDFs

- [In√≠cio R√°pido](#-in√≠cio-r√°pido)- üßÆ Opera√ß√µes matem√°ticas

- [Arquitetura](#-arquitetura)- üîí Filtro de IP para seguran√ßa

- [Endpoints Dispon√≠veis](#-endpoints-dispon√≠veis)- üìö Documenta√ß√£o interativa

- [Como Criar Nova Funcionalidade](#-como-criar-nova-funcionalidade)

- [Configura√ß√£o](#-configura√ß√£o)**URL de Produ√ß√£o**: https://api.samm.host

- [Exemplos de Uso](#-exemplos-de-uso)

- [Estrutura do Projeto](#-estrutura-do-projeto)---

- [Documenta√ß√£o Adicional](#-documenta√ß√£o-adicional)

- [Contribuindo](#-contribuindo)## ‚ö° Funcionalidades

- [Licen√ßa](#-licen√ßa)

### 1. üìö Documenta√ß√£o da API

---

#### `GET /`

## üîß Instala√ß√£oRetorna documenta√ß√£o completa em JSON com todos os endpoints, par√¢metros e exemplos.



### Pr√©-requisitos```bash

curl https://api.samm.host/

- **Node.js** >= 22.18.0```

- **npm** ou **yarn**

#### `GET /docs`

### Clonar e InstalarP√°gina HTML interativa com a documenta√ß√£o visual.



```bash```bash

# Clonar reposit√≥rio# Acesse no navegador:

git clone https://github.com/gilbertoromanholew/api.githttps://api.samm.host/docs

cd api```



# Instalar depend√™ncias---

npm install

### 2. ‚úÖ Valida√ß√£o de CPF

# Configurar vari√°veis de ambiente

cp .env.example .env#### `POST /validate-cpf`

# Edite o arquivo .env conforme necess√°rio

Valida CPFs brasileiros usando o algoritmo oficial.

# Iniciar servidor

npm start**Requisi√ß√£o:**

``````bash

curl -X POST https://api.samm.host/validate-cpf \

O servidor estar√° rodando em **http://localhost:3000** üéâ  -H "Content-Type: application/json" \

  -d '{"cpf": "12345678901"}'

---```



## üöÄ In√≠cio R√°pido**Resposta de Sucesso:**

```json

### Testar a API{

  "valido": true,

```bash  "cpf": "123.456.789-01",

# Ver informa√ß√µes da API  "mensagem": "CPF v√°lido"

curl http://localhost:3000/}

```

# Acessar documenta√ß√£o HTML

curl http://localhost:3000/docs**Resposta de Erro:**

```json

# Listar usu√°rios exemplo{

curl http://localhost:3000/usuarios  "valido": false,

  "cpf": "12345678901",

# Criar novo usu√°rio  "mensagem": "CPF inv√°lido"

curl -X POST http://localhost:3000/usuarios \}

  -H "Content-Type: application/json" \```

  -d '{"nome":"Jo√£o Silva","email":"joao@exemplo.com","idade":30}'

---

# Buscar usu√°rio por ID

curl http://localhost:3000/usuarios/1### 3. üìÑ Leitura de PDF



# Ver estat√≠sticas#### `POST /read-pdf`

curl http://localhost:3000/usuarios/estatisticas

Extrai texto de arquivos PDF.

# Ler PDF

curl -X POST http://localhost:3000/read-pdf \**Requisi√ß√£o:**

  -F "pdf=@caminho/para/arquivo.pdf"```bash

```curl -X POST https://api.samm.host/read-pdf \

  -F "pdf=@documento.pdf"

---```



## üèóÔ∏è Arquitetura**Resposta:**

```json

### Vis√£o Geral{

  "success": true,

A API utiliza uma **arquitetura modular** onde cada funcionalidade √© auto-contida e descoberta automaticamente.  "texto": "Conte√∫do extra√≠do do PDF...",

  "paginas": 5,

```  "info": {

src/    "titulo": "Documento",

‚îú‚îÄ‚îÄ core/    "autor": "Autor"

‚îÇ   ‚îú‚îÄ‚îÄ BaseController.js      # Classe base para controllers  }

‚îÇ   ‚îî‚îÄ‚îÄ routeLoader.js          # Auto-carregador de rotas}

‚îú‚îÄ‚îÄ middlewares/```

‚îÇ   ‚îú‚îÄ‚îÄ validator.js            # Valida√ß√£o centralizada

‚îÇ   ‚îú‚îÄ‚îÄ errorHandler.js         # Tratamento global de erros---

‚îÇ   ‚îî‚îÄ‚îÄ ipFilter.js             # Controle de acesso por IP

‚îú‚îÄ‚îÄ funcionalidades/### 4. üßÆ Calculadora

‚îÇ   ‚îú‚îÄ‚îÄ _TEMPLATE/              # Template para novas features

‚îÇ   ‚îú‚îÄ‚îÄ exemplo/                # CRUD de usu√°rios (exemplo)#### `POST /calcular`

‚îÇ   ‚îî‚îÄ‚îÄ pdf/                    # Leitura de PDF

‚îú‚îÄ‚îÄ config/Realiza opera√ß√µes matem√°ticas.

‚îÇ   ‚îî‚îÄ‚îÄ index.js                # Configura√ß√µes centralizadas

‚îî‚îÄ‚îÄ routes/**Opera√ß√µes dispon√≠veis:**

    ‚îú‚îÄ‚îÄ docs.js                 # Documenta√ß√£o HTML- `somar` - Adi√ß√£o

    ‚îú‚îÄ‚îÄ logsDashboard.js        # Dashboard de logs- `subtrair` - Subtra√ß√£o

    ‚îî‚îÄ‚îÄ logsRoutes.js           # API de logs- `multiplicar` - Multiplica√ß√£o

```- `dividir` - Divis√£o

- `porcentagem` - C√°lculo de percentual

### Fluxo de Requisi√ß√£o

**Requisi√ß√£o:**

``````bash

Cliente ‚Üí IP Filter ‚Üí CORS ‚Üí Validator ‚Üí Controller ‚Üí Responsecurl -X POST https://api.samm.host/calcular \

                                ‚Üì  -H "Content-Type: application/json" \

                          Error Handler (se erro)  -d '{"operacao": "somar", "a": 10, "b": 5}'

``````



### Componentes Principais**Resposta:**

```json

#### 1. **BaseController**{

Classe base que todos os controllers estendem, fornecendo:  "operacao": "somar",

- `success(res, data, message, statusCode)` - Resposta de sucesso padronizada  "a": 10,

- `error(res, message, statusCode, errors)` - Resposta de erro padronizada  "b": 5,

- `execute(req, res, handler)` - Wrapper com try-catch autom√°tico  "resultado": 15

}

#### 2. **Auto-loader**```

Sistema que descobre e registra rotas automaticamente:

- Varre `src/funcionalidades/` em busca de arquivos `*Routes.js`**Exemplo de Porcentagem:**

- Registra rotas no Express automaticamente```bash

- Ignora pasta `_TEMPLATE`curl -X POST https://api.samm.host/calcular \

  -H "Content-Type: application/json" \

#### 3. **Validator**  -d '{"operacao": "porcentagem", "a": 100, "b": 15}'

Middleware de valida√ß√£o com schemas reutiliz√°veis:```

- Valida√ß√£o de campos obrigat√≥riosRetorna: `15` (15% de 100)

- Valida√ß√£o de tipos

- Valida√ß√£o de comprimento---

- Valida√ß√£o de valores enum

## üîß Instala√ß√£o

#### 4. **Error Handler**

Tratamento global de erros:### Pr√©-requisitos

- Captura todos os erros n√£o tratados- Node.js >= 22.18.0

- Handler personalizado para 404- npm >= 10.x

- Stack trace em ambiente de desenvolvimento

### Passos

---

1. **Clone o reposit√≥rio:**

## üì° Endpoints Dispon√≠veis```bash

git clone https://github.com/gilbertoromanholew/api.git

### Sistemacd api

```

| M√©todo | Endpoint | Descri√ß√£o |

|--------|----------|-----------|2. **Instale as depend√™ncias:**

| `GET` | `/` | Informa√ß√µes da API em JSON |```bash

| `GET` | `/docs` | Documenta√ß√£o HTML interativa |npm install

| `GET` | `/logs` | Dashboard de logs em tempo real |```

| `GET` | `/api/logs` | API de logs (JSON) |

3. **Configure as vari√°veis de ambiente:**

### Funcionalidade: Exemplo (CRUD de Usu√°rios)```bash

cp .env.example .env

| M√©todo | Endpoint | Descri√ß√£o |```

|--------|----------|-----------|

| `GET` | `/usuarios` | Lista todos os usu√°rios (com filtros) |4. **Inicie o servidor:**

| `GET` | `/usuarios/estatisticas` | Estat√≠sticas dos usu√°rios |```bash

| `GET` | `/usuarios/:id` | Busca usu√°rio por ID |npm start

| `POST` | `/usuarios` | Cria novo usu√°rio |```

| `PUT` | `/usuarios/:id` | Atualiza usu√°rio |

| `DELETE` | `/usuarios/:id` | Remove usu√°rio |5. **Acesse a API:**

```

**Filtros dispon√≠veis em GET /usuarios:**http://localhost:3000

- `?ativo=true/false` - Filtrar por status```

- `?idade_min=25` - Idade m√≠nima

- `?idade_max=40` - Idade m√°xima---



### Funcionalidade: PDF## ‚öôÔ∏è Configura√ß√£o



| M√©todo | Endpoint | Descri√ß√£o |### Arquivo `.env`

|--------|----------|-----------|

| `POST` | `/read-pdf` | Extrai texto de arquivo PDF |Copie `.env.example` para `.env` e configure:



---```env

# Servidor

## üÜï Como Criar Nova FuncionalidadePORT=3000

HOST=0.0.0.0

### M√©todo 1: Copiar Template (5 minutos)

# Seguran√ßa - IPs autorizados (separados por v√≠rgula)

```powershellALLOWED_IPS=127.0.0.1,192.168.1.100,177.73.205.198

# 1. Copiar template

Copy-Item -Path "src/funcionalidades/_TEMPLATE" -Destination "src/funcionalidades/minha-feature" -Recurse# Logs

LOG_LEVEL=info

# 2. Renomear arquivosLOG_FILE=false

# template* ‚Üí minhafeature*```



# 3. Editar controller e routes### Configura√ß√£o de IPs Autorizados

# Implementar sua l√≥gica

Por padr√£o, `localhost` (127.0.0.1 e ::1) sempre √© permitido. Adicione outros IPs conforme necess√°rio:

# 4. Reiniciar servidor

npm start```env

ALLOWED_IPS=192.168.1.100,177.73.205.198,104.23.254.125

# ‚úÖ Pronto! As rotas ser√£o descobertas automaticamente```

```

**Importante:** Se usar Cloudflare ou proxy, desabilite o proxy (DNS only) ou adicione o IP do proxy.

### M√©todo 2: Manual

---

1. **Criar pasta** em `src/funcionalidades/`## üìÅ Estrutura do Projeto

2. **Criar Controller** estendendo `BaseController`

3. **Criar Routes** exportando um `Router` do Express```

4. **Reiniciar servidor** - Auto-descoberta far√° o resto!api/

‚îú‚îÄ‚îÄ .env                         # Vari√°veis de ambiente (n√£o commitar)

### Exemplo M√≠nimo‚îú‚îÄ‚îÄ .env.example                 # Template de configura√ß√£o

‚îú‚îÄ‚îÄ .gitignore                   # Arquivos ignorados pelo git

```javascript‚îú‚îÄ‚îÄ package.json                 # Depend√™ncias e scripts

// src/funcionalidades/hello/helloController.js‚îú‚îÄ‚îÄ package-lock.json            # Lock de depend√™ncias

import { BaseController } from '../../core/BaseController.js';‚îú‚îÄ‚îÄ server.js                    # Arquivo principal da aplica√ß√£o

‚îú‚îÄ‚îÄ README.md                    # Documenta√ß√£o principal

class HelloController extends BaseController {‚îÇ

    async sayHello(req, res) {‚îî‚îÄ‚îÄ src/

        return this.execute(req, res, async (req, res) => {    ‚îú‚îÄ‚îÄ config/                  # Configura√ß√µes

            const { nome } = req.body;    ‚îÇ   ‚îú‚îÄ‚îÄ index.js             # Carrega vari√°veis do .env

            return this.success(res, { mensagem: `Ol√°, ${nome}!` });    ‚îÇ   ‚îî‚îÄ‚îÄ allowedIPs.js        # Lista de IPs autorizados

        });    ‚îÇ

    }    ‚îú‚îÄ‚îÄ middlewares/             # Middlewares Express

}    ‚îÇ   ‚îî‚îÄ‚îÄ ipFilter.js          # Filtro de seguran√ßa por IP

    ‚îÇ

export default new HelloController();    ‚îú‚îÄ‚îÄ routes/                  # Rotas principais

```    ‚îÇ   ‚îú‚îÄ‚îÄ index.js             # GET / (documenta√ß√£o JSON)

    ‚îÇ   ‚îî‚îÄ‚îÄ docs.js              # GET /docs (p√°gina HTML)

```javascript    ‚îÇ

// src/funcionalidades/hello/helloRoutes.js    ‚îú‚îÄ‚îÄ utils/                   # Utilit√°rios

import { Router } from 'express';    ‚îÇ   ‚îî‚îÄ‚îÄ pdfParseWrapper.cjs  # Wrapper CommonJS para pdf-parse

import helloController from './helloController.js';    ‚îÇ

    ‚îî‚îÄ‚îÄ funcionalidades/         # Funcionalidades modulares

const router = Router();        ‚îÇ

router.post('/hello', (req, res) => helloController.sayHello(req, res));        ‚îú‚îÄ‚îÄ validacao/           # Valida√ß√£o de documentos

export default router;        ‚îÇ   ‚îú‚îÄ‚îÄ README.md        # Documenta√ß√£o da funcionalidade

```        ‚îÇ   ‚îú‚îÄ‚îÄ cpfValidator.js  # Algoritmo de valida√ß√£o CPF

        ‚îÇ   ‚îú‚îÄ‚îÄ cpfController.js # Controller de requisi√ß√µes

**Pronto!** Reinicie o servidor e acesse `POST /hello`        ‚îÇ   ‚îî‚îÄ‚îÄ cpfRoutes.js     # Rotas: POST /validate-cpf

        ‚îÇ

---        ‚îú‚îÄ‚îÄ pdf/                 # Processamento de PDF

        ‚îÇ   ‚îú‚îÄ‚îÄ README.md        # Documenta√ß√£o da funcionalidade

## ‚öôÔ∏è Configura√ß√£o        ‚îÇ   ‚îú‚îÄ‚îÄ pdfController.js # Controller de PDF

        ‚îÇ   ‚îî‚îÄ‚îÄ pdfRoutes.js     # Rotas: POST /read-pdf

### Vari√°veis de Ambiente (.env)        ‚îÇ

        ‚îú‚îÄ‚îÄ calculo/             # Opera√ß√µes matem√°ticas

```env        ‚îÇ   ‚îú‚îÄ‚îÄ README.md        # Documenta√ß√£o da funcionalidade

# Servidor        ‚îÇ   ‚îú‚îÄ‚îÄ calculoUtils.js  # Fun√ß√µes matem√°ticas

PORT=3000        ‚îÇ   ‚îú‚îÄ‚îÄ calculoController.js # Controller de c√°lculos

HOST=0.0.0.0        ‚îÇ   ‚îî‚îÄ‚îÄ calculoRoutes.js # Rotas: POST /calcular

NODE_ENV=development        ‚îÇ

        ‚îî‚îÄ‚îÄ extras/              # Funcionalidades futuras

# Seguran√ßa            ‚îî‚îÄ‚îÄ README.md        # Planejamento de features

ALLOWED_IPS=192.168.1.1,10.0.0.1  # IPs permitidos (vazio = todos)```

CORS_ORIGIN=*                     # Origem CORS permitida

**Total:** ~20 arquivos essenciais de c√≥digo + documenta√ß√£o

# Rate Limiting

RATE_LIMIT_WINDOW=60000           # Janela em ms (1 min)---

RATE_LIMIT_MAX=100                # M√°ximo de requisi√ß√µes

## üîí Seguran√ßa

# Logs

MAX_LOGS=100                      # M√°ximo de logs em mem√≥ria### Filtro de IP

LOG_RETENTION_DAYS=7              # Dias para manter logs

A API implementa um sistema de whitelist de IPs:

# Upload

MAX_FILE_SIZE=5242880             # Tamanho m√°ximo (5MB)- ‚úÖ **IPs autorizados** ‚Üí Acesso total √† API

```- ‚ùå **IPs n√£o autorizados** ‚Üí Erro 403



### Configura√ß√£o Centralizada**Configura√ß√£o no `.env`:**

```env

Todas as configura√ß√µes est√£o em `src/config/index.js`:ALLOWED_IPS=192.168.1.100,177.73.205.198

```

```javascript

import config from './src/config/index.js';**Sempre permitidos:**

- `127.0.0.1` (localhost IPv4)

// Uso- `::1` (localhost IPv6)

config.server.port        // 3000

config.security.corsOrigin  // '*'### Suporte a Proxies

config.logs.maxLogs       // 100

config.upload.maxFileSize // 5242880O filtro de IP detecta automaticamente o IP real atrav√©s de headers:

```- `X-Forwarded-For` (proxies, load balancers)

- `X-Real-IP` (nginx, Apache)

---- `req.ip` (conex√£o direta)



## üí° Exemplos de Uso**Cloudflare:** Configure como "DNS only" (desabilitar proxy) para que o IP real seja detectado.



### Exemplo 1: Listar Usu√°rios com Filtros---



**Requisi√ß√£o:**## üöÄ Deploy

```bash

curl "http://localhost:3000/usuarios?ativo=true&idade_min=25&idade_max=35"### Deploy em VPS

```

1. **Conectar ao servidor:**

**Resposta:**```bash

```jsonssh usuario@seu-servidor.com

{```

  "success": true,

  "message": "2 usu√°rio(s) encontrado(s)",2. **Instalar Node.js (se necess√°rio):**

  "data": {```bash

    "total": 2,curl -fsSL https://deb.nodesource.com/setup_22.x | sudo -E bash -

    "usuarios": [sudo apt-get install -y nodejs

      {```

        "id": 1,

        "nome": "Jo√£o Silva",3. **Clonar o reposit√≥rio:**

        "email": "joao@exemplo.com",```bash

        "idade": 30,git clone https://github.com/gilbertoromanholew/api.git

        "ativo": truecd api

      },```

      {

        "id": 2,4. **Instalar depend√™ncias:**

        "nome": "Maria Santos",```bash

        "email": "maria@exemplo.com",npm install

        "idade": 25,```

        "ativo": true

      }5. **Configurar vari√°veis:**

    ]```bash

  }cp .env.example .env

}nano .env  # Editar configura√ß√µes

``````



### Exemplo 2: Criar Usu√°rio6. **Instalar PM2 (gerenciador de processos):**

```bash

**Requisi√ß√£o:**sudo npm install -g pm2

```bash```

curl -X POST http://localhost:3000/usuarios \

  -H "Content-Type: application/json" \7. **Iniciar a aplica√ß√£o:**

  -d '{```bash

    "nome": "Pedro Costa",pm2 start server.js --name api

    "email": "pedro@exemplo.com",pm2 save

    "idade": 28,pm2 startup  # Configurar inicializa√ß√£o autom√°tica

    "ativo": true```

  }'

```8. **Verificar status:**

```bash

**Resposta:**pm2 status

```jsonpm2 logs api

{```

  "success": true,

  "message": "Usu√°rio criado com sucesso",### Atualizar Deploy

  "data": {

    "id": 4,```bash

    "nome": "Pedro Costa",cd /caminho/da/api

    "email": "pedro@exemplo.com",git pull origin main

    "idade": 28,npm install

    "ativo": true,pm2 restart api

    "criadoEm": "2025-10-16T19:30:00.000Z"```

  }

}### Configurar HTTPS (Nginx + Let's Encrypt)

```

1. **Instalar Nginx:**

### Exemplo 3: Erro de Valida√ß√£o```bash

sudo apt install nginx

**Requisi√ß√£o:**```

```bash

curl -X POST http://localhost:3000/usuarios \2. **Configurar proxy reverso:**

  -H "Content-Type: application/json" \```nginx

  -d '{"nome": "Jo"}'  # Nome muito curto# /etc/nginx/sites-available/api

```server {

    listen 80;

**Resposta:**    server_name api.samm.host;

```json

{    location / {

  "success": false,        proxy_pass http://localhost:3000;

  "message": "Erro de valida√ß√£o",        proxy_http_version 1.1;

  "errors": [        proxy_set_header Upgrade $http_upgrade;

    "Campo 'email' √© obrigat√≥rio",        proxy_set_header Connection 'upgrade';

    "Campo 'idade' √© obrigat√≥rio",        proxy_set_header Host $host;

    "Campo 'nome' deve ter entre 3 e 100 caracteres"        proxy_set_header X-Real-IP $remote_addr;

  ]        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

}        proxy_cache_bypass $http_upgrade;

```    }

}

### Exemplo 4: Ler PDF```



**Requisi√ß√£o:**3. **Ativar site:**

```bash```bash

curl -X POST http://localhost:3000/read-pdf \sudo ln -s /etc/nginx/sites-available/api /etc/nginx/sites-enabled/

  -F "pdf=@documento.pdf"sudo nginx -t

```sudo systemctl restart nginx

```

**Resposta:**

```json4. **Instalar SSL:**

{```bash

  "success": true,sudo apt install certbot python3-certbot-nginx

  "message": "PDF processado com sucesso",sudo certbot --nginx -d api.samm.host

  "data": {```

    "text": "Conte√∫do extra√≠do do PDF...",

    "pages": 5,---

    "info": {

      "Title": "Documento Exemplo",## üõ†Ô∏è Desenvolvimento

      "Author": "Jo√£o Silva"

    },### Adicionar Nova Funcionalidade

    "metadata": {

      "CreationDate": "2025-10-16T10:00:00.000Z"1. **Criar estrutura:**

    }```bash

  }mkdir -p src/funcionalidades/minha-funcionalidade

}cd src/funcionalidades/minha-funcionalidade

``````



---2. **Criar arquivos:**



## üìÇ Estrutura do Projeto**`README.md`** - Documenta√ß√£o

```markdown

```# Minha Funcionalidade

api/

‚îú‚îÄ‚îÄ src/## Descri√ß√£o

‚îÇ   ‚îú‚îÄ‚îÄ core/...

‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ BaseController.js        # Classe base para controllers

‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ routeLoader.js            # Auto-carregador de rotas## Endpoint

‚îÇ   ‚îú‚îÄ‚îÄ middlewares/POST /minha-rota

‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ errorHandler.js           # Tratamento global de erros

‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ipFilter.js               # Filtro de IP## Par√¢metros

‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ validator.js              # Valida√ß√£o centralizada...

‚îÇ   ‚îú‚îÄ‚îÄ funcionalidades/```

‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ _TEMPLATE/                # üì¶ Template para novas features

‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ README.md**`minhaController.js`** - L√≥gica

‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ templateController.js```javascript

‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ templateRoutes.jsexport const minhaFuncao = (req, res) => {

‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ templateUtils.js    const { parametro } = req.body;

‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ exemplo/                  # ‚úÖ CRUD de usu√°rios    

‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ exemploController.js    // Sua l√≥gica aqui

‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ exemploRoutes.js    

‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ pdf/                      # üìÑ Leitura de PDF    res.json({ resultado: 'sucesso' });

‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ pdfController.js};

‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ pdfRoutes.js```

‚îÇ   ‚îú‚îÄ‚îÄ config/

‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ index.js                  # Configura√ß√µes centralizadas**`minhaRoutes.js`** - Rotas

‚îÇ   ‚îú‚îÄ‚îÄ routes/```javascript

‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ docs.js                   # Documenta√ß√£o HTMLimport express from 'express';

‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.js                  # Rotas de sistemaimport { minhaFuncao } from './minhaController.js';

‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ logsDashboard.js          # Dashboard de logs

‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ logsRoutes.js             # API de logsconst router = express.Router();

‚îÇ   ‚îî‚îÄ‚îÄ utils/

‚îÇ       ‚îú‚îÄ‚îÄ ipLogger.js               # Logger de acessosrouter.post('/minha-rota', minhaFuncao);

‚îÇ       ‚îî‚îÄ‚îÄ pdfParseWrapper.cjs       # Wrapper para pdf-parse

‚îú‚îÄ‚îÄ .env                              # Vari√°veis de ambienteexport default router;

‚îú‚îÄ‚îÄ .env.example                      # Exemplo de configura√ß√£o```

‚îú‚îÄ‚îÄ package.json                      # Depend√™ncias

‚îú‚îÄ‚îÄ server.js                         # Entry point3. **Registrar no `server.js`:**

‚îî‚îÄ‚îÄ README.md                         # Este arquivo```javascript

```import minhaRoutes from './src/funcionalidades/minha-funcionalidade/minhaRoutes.js';



---// ... outras importa√ß√µes ...



## üìö Documenta√ß√£o Adicionalapp.use(minhaRoutes);

```

- **[GUIA_RAPIDO.md](./GUIA_RAPIDO.md)** - Guia de in√≠cio r√°pido (5 minutos)

- **[IMPLEMENTACAO_CONCLUIDA.md](./IMPLEMENTACAO_CONCLUIDA.md)** - Documenta√ß√£o t√©cnica completa4. **Atualizar documenta√ß√£o em `src/routes/index.js`**

- **[SUGESTOES_MELHORIA.md](./SUGESTOES_MELHORIA.md)** - Decis√µes de arquitetura

- **[RESUMO_EXECUTIVO.md](./RESUMO_EXECUTIVO.md)** - Resumo executivo da implementa√ß√£o5. **Testar:**

- **[src/funcionalidades/_TEMPLATE/README.md](./src/funcionalidades/_TEMPLATE/README.md)** - Como criar novas funcionalidades```bash

npm start

---

curl -X POST http://localhost:3000/minha-rota \

## üéØ Roadmap  -H "Content-Type: application/json" \

  -d '{"parametro": "valor"}'

### ‚úÖ Implementado (v2.0)```



- [x] Auto-carregamento de rotas### Scripts dispon√≠veis

- [x] BaseController padronizado

- [x] Sistema de valida√ß√£o centralizado```bash

- [x] Tratamento global de errosnpm start       # Inicia o servidor

- [x] Dashboard de documenta√ß√£onpm test        # (adicionar testes no futuro)

- [x] Sistema de templates```

- [x] Logs de acesso

- [x] Filtro de IP### Depend√™ncias



### üöß Em Planejamento (v3.0)**Produ√ß√£o:**

- `express@5.1.0` - Framework web

- [ ] Testes automatizados (Jest)- `cors` - Cross-Origin Resource Sharing

- [ ] OpenAPI/Swagger docs- `dotenv` - Vari√°veis de ambiente

- [ ] Rate limiting avan√ßado- `multer` - Upload de arquivos

- [ ] Cache com Redis- `pdf-parse@1.1.1` - Extra√ß√£o de texto de PDF

- [ ] WebSockets

- [ ] Autentica√ß√£o JWT**Desenvolvimento:**

- [ ] Docker containerization- Node.js >= 22.18.0

- [ ] CI/CD pipeline

---

---

## üìù Documenta√ß√£o de Funcionalidades

## ü§ù Contribuindo

Cada funcionalidade possui sua pr√≥pria documenta√ß√£o detalhada:

Contribui√ß√µes s√£o bem-vindas! Siga os passos:

- [Valida√ß√£o de CPF](src/funcionalidades/validacao/README.md)

1. **Fork** o projeto- [Leitura de PDF](src/funcionalidades/pdf/README.md)

2. **Crie uma branch** para sua feature (`git checkout -b feature/MinhaFeature`)- [Calculadora](src/funcionalidades/calculo/README.md)

3. **Commit suas mudan√ßas** (`git commit -m 'feat: Adiciona MinhaFeature'`)- [Extras (Futuras)](src/funcionalidades/extras/README.md)

4. **Push para a branch** (`git push origin feature/MinhaFeature`)

5. **Abra um Pull Request**---



### Padr√£o de Commits## üêõ Troubleshooting



Seguimos [Conventional Commits](https://www.conventionalcommits.org/):### Erro: "Cannot find module"

```bash

- `feat:` Nova funcionalidadenpm install

- `fix:` Corre√ß√£o de bugpm2 restart api

- `docs:` Documenta√ß√£o```

- `refactor:` Refatora√ß√£o de c√≥digo

- `test:` Testes### Erro: Porta 3000 j√° em uso

- `chore:` Tarefas de manuten√ß√£o```bash

# Encontrar processo na porta 3000

---lsof -ti:3000



## üìÑ Licen√ßa# Matar processo

lsof -ti:3000 | xargs kill -9

Este projeto est√° sob a licen√ßa **MIT**. Veja o arquivo [LICENSE](LICENSE) para mais detalhes.

# Ou mudar a porta no .env

---PORT=3001

```

## üë®‚Äçüíª Autor

### Erro 403 mesmo com IP autorizado

**Gilberto Romanhole**

1. Verifique o IP detectado nos logs:

- GitHub: [@gilbertoromanholew](https://github.com/gilbertoromanholew)```bash

- Reposit√≥rio: [github.com/gilbertoromanholew/api](https://github.com/gilbertoromanholew/api)pm2 logs api

```

---

2. Se estiver usando Cloudflare:

## üìû Suporte   - Acesse o painel do Cloudflare

   - V√° em DNS

- üìñ Veja a [Documenta√ß√£o Completa](./GUIA_RAPIDO.md)   - Desabilite o proxy (nuvem laranja ‚Üí cinza)

- üêõ Reporte bugs via [Issues](https://github.com/gilbertoromanholew/api/issues)

- üí¨ Tire d√∫vidas nas [Discussions](https://github.com/gilbertoromanholew/api/discussions)3. Se estiver atr√°s de proxy/load balancer:

   - Verifique os headers `X-Forwarded-For` ou `X-Real-IP`

---   - Adicione o IP do proxy na lista de permitidos



## üåü M√©tricas### PDF n√£o est√° sendo lido



| M√©trica | Valor |1. Verifique o formato do arquivo (deve ser PDF v√°lido)

|---------|-------|2. Verifique o tamanho (multer tem limite padr√£o)

| **Tempo para criar funcionalidade** | 5 minutos (70% mais r√°pido) |3. Verifique se o campo do form-data √© `pdf`

| **Linhas de c√≥digo por controller** | 15-20 linhas (50% menos) |

| **Tempo de configura√ß√£o** | 30 segundos (95% mais r√°pido) |---

| **Cobertura de testes** | Em desenvolvimento |

## üìÑ Licen√ßa

---

Este projeto √© propriet√°rio. Todos os direitos reservados.

## üéâ Agradecimentos

---

- [Express.js](https://expressjs.com/) - Framework web minimalista

- [Node.js](https://nodejs.org/) - Runtime JavaScript## üë®‚Äçüíª Autor

- [pdf-parse](https://www.npmjs.com/package/pdf-parse) - Extra√ß√£o de texto de PDF

- [dotenv](https://www.npmjs.com/package/dotenv) - Gerenciamento de vari√°veis de ambiente**Gilberto Romano Holew**

- GitHub: [@gilbertoromanholew](https://github.com/gilbertoromanholew)

---- Website: https://api.samm.host



<div align="center">---



**‚≠ê Se este projeto foi √∫til, considere dar uma estrela! ‚≠ê**## üìû Suporte



Feito com ‚ù§Ô∏è por [Gilberto Romanhole](https://github.com/gilbertoromanholew)Para quest√µes ou problemas:

- Abra uma [issue](https://github.com/gilbertoromanholew/api/issues)

</div>- Entre em contato atrav√©s do site


---

## üìä Status

- **Vers√£o:** 2.0.0
- **Status:** ‚úÖ Online e funcional
- **√öltima atualiza√ß√£o:** 16 de outubro de 2025
- **Node.js:** >= 22.18.0
- **Express:** 5.1.0

---

**‚ö° API desenvolvida com foco em modularidade, seguran√ßa e escalabilidade.**
